package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"strings"
	"sync"
	"time"

	"github.com/gorilla/websocket"
	"github.com/nats-io/nats.go"
)

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
type Config struct {
	Server struct {
		Port        string   `json:"port"`
		CORSOrigins []string `json:"cors_origins"`
	} `json:"server"`
	NATS struct {
		URL                  string `json:"url"`
		MaxReconnects        int    `json:"max_reconnects"`
		ReconnectWaitSeconds int    `json:"reconnect_wait_seconds"`
	} `json:"nats"`
	Symbols []string `json:"symbols"`
	Markets []string `json:"markets"`
}

type WebSocketServer struct {
	config           *Config
	clients          map[*websocket.Conn]*Client
	clientsMux       sync.RWMutex
	natsConn         *nats.Conn
	upgrader         websocket.Upgrader
	subscriptions    map[string]*nats.Subscription
	subscriptionsMux sync.RWMutex
}

type Client struct {
	conn       *websocket.Conn
	symbols    map[string]bool
	symbolsMux sync.RWMutex
	writeMux   sync.Mutex // –î–û–ë–ê–í–õ–Ø–ï–ú –ú–¨–Æ–¢–ï–ö–° –î–õ–Ø –ó–ê–ü–ò–°–ò
}

type ClientMessage struct {
	Type    string   `json:"type"`
	Symbols []string `json:"symbols,omitempty"`
}

type MarketDataMessage struct {
	Symbol    string    `json:"symbol"`
	Price     float64   `json:"price"`
	Market    string    `json:"market"`
	Timestamp time.Time `json:"timestamp"`
}

type NATSQuoteData struct {
	Symbol    string    `json:"symbol"`
	Price     float64   `json:"price"`
	Market    string    `json:"market"`
	Timestamp time.Time `json:"timestamp"`
}

// loadConfig –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
func loadConfig(configPath string) (*Config, error) {
	if configPath == "" {
		configPath = "config.json"
	}

	data, err := os.ReadFile(configPath)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: %w", err)
	}

	var config Config
	if err := json.Unmarshal(data, &config); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω—Ñ–∏–≥–∞: %w", err)
	}

	// –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥–∞
	if config.Server.Port == "" {
		config.Server.Port = "8080"
	}
	if config.NATS.URL == "" {
		config.NATS.URL = "nats://31.207.77.179:4222"
	}
	if len(config.Symbols) == 0 {
		return nil, fmt.Errorf("—Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
	}
	if len(config.Markets) == 0 {
		config.Markets = []string{"spot", "futures"}
	}

	return &config, nil
}

func NewWebSocketServer(config *Config) (*WebSocketServer, error) {
	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ NATS —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
	opts := []nats.Option{
		nats.MaxReconnects(config.NATS.MaxReconnects),
		nats.ReconnectWait(time.Duration(config.NATS.ReconnectWaitSeconds) * time.Second),
		nats.DisconnectErrHandler(func(nc *nats.Conn, err error) {
			log.Printf("NATS disconnected: %v", err)
		}),
		nats.ReconnectHandler(func(nc *nats.Conn) {
			log.Println("NATS reconnected!")
		}),
	}

	nc, err := nats.Connect(config.NATS.URL, opts...)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ NATS: %w", err)
	}

	return &WebSocketServer{
		config:        config,
		clients:       make(map[*websocket.Conn]*Client),
		natsConn:      nc,
		subscriptions: make(map[string]*nats.Subscription),
		upgrader: websocket.Upgrader{
			CheckOrigin: func(r *http.Request) bool {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º CORS origins –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
				origin := r.Header.Get("Origin")
				for _, allowedOrigin := range config.Server.CORSOrigins {
					if allowedOrigin == "*" || allowedOrigin == origin {
						return true
					}
				}
				return len(config.Server.CORSOrigins) == 0
			},
		},
	}, nil
}

func (ws *WebSocketServer) handleWebSocket(w http.ResponseWriter, r *http.Request) {
	conn, err := ws.upgrader.Upgrade(w, r, nil)
	if err != nil {
		log.Printf("‚ùå WebSocket upgrade error: %v", err)
		return
	}
	defer conn.Close()

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å –º—å—é—Ç–µ–∫—Å–æ–º –¥–ª—è –∑–∞–ø–∏—Å–∏
	client := &Client{
		conn:    conn,
		symbols: make(map[string]bool),
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
	ws.clientsMux.Lock()
	ws.clients[conn] = client
	ws.clientsMux.Unlock()

	log.Printf("‚úÖ New WebSocket client connected. Total: %d", len(ws.clients))

	// –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
	defer func() {
		ws.clientsMux.Lock()
		delete(ws.clients, conn)
		ws.clientsMux.Unlock()
		log.Printf("‚ùå WebSocket client disconnected. Total: %d", len(ws.clients))
	}()

	// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
	ws.subscribeClientToSymbols(client, ws.config.Symbols)

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
	for {
		var msg ClientMessage
		err := conn.ReadJSON(&msg)
		if err != nil {
			if websocket.IsUnexpectedCloseError(err, websocket.CloseGoingAway, websocket.CloseAbnormalClosure) {
				log.Printf("‚ùå WebSocket error: %v", err)
			}
			break
		}

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
		if msg.Type == "subscribe" && len(msg.Symbols) > 0 {
			ws.subscribeClientToSymbols(client, msg.Symbols)
		}
	}
}

func (ws *WebSocketServer) subscribeClientToSymbols(client *Client, symbols []string) {
	client.symbolsMux.Lock()
	for _, symbol := range symbols {
		client.symbols[strings.ToUpper(symbol)] = true
	}
	client.symbolsMux.Unlock()

	// –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ NATS —Ç–æ–ø–∏–∫–∏ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã)
	for _, symbol := range symbols {
		ws.ensureNATSSubscription(symbol)
	}
}

func (ws *WebSocketServer) ensureNATSSubscription(symbol string) {
	symbolLower := strings.ToLower(symbol)

	// –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≤—Å–µ —Ä—ã–Ω–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
	for _, market := range ws.config.Markets {
		subject := fmt.Sprintf("quotes.%s.%s", market, symbolLower)

		ws.subscriptionsMux.Lock()
		if _, exists := ws.subscriptions[subject]; !exists {
			sub, err := ws.natsConn.Subscribe(subject, func(m *nats.Msg) {
				ws.handleNATSMessage(m, subject)
			})

			if err != nil {
				log.Printf("‚ùå Error subscribing to %s: %v", subject, err)
			} else {
				ws.subscriptions[subject] = sub
				log.Printf("üì° Subscribed to NATS subject: %s", subject)
			}
		}
		ws.subscriptionsMux.Unlock()
	}
}

func (ws *WebSocketServer) handleNATSMessage(m *nats.Msg, subject string) {
	// –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç NATS
	var natsData NATSQuoteData
	if err := json.Unmarshal(m.Data, &natsData); err != nil {
		log.Printf("‚ùå Error parsing NATS message from %s: %v", subject, err)
		return
	}

	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è WebSocket –∫–ª–∏–µ–Ω—Ç–æ–≤
	wsMessage := MarketDataMessage{
		Symbol:    natsData.Symbol,
		Price:     natsData.Price,
		Market:    natsData.Market,
		Timestamp: natsData.Timestamp,
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º (–ë–ï–ó –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –î–õ–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò)
	ws.broadcastToInterestedClients(wsMessage)
}

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –° THREAD-SAFE –ó–ê–ü–ò–°–¨–Æ
func (ws *WebSocketServer) broadcastToInterestedClients(message MarketDataMessage) {
	ws.clientsMux.RLock()
	clients := make([]*Client, 0, len(ws.clients))
	for _, client := range ws.clients {
		clients = append(clients, client)
	}
	ws.clientsMux.RUnlock()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ, –Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ
	var wg sync.WaitGroup
	for _, client := range clients {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ —ç—Ç–æ—Ç —Å–∏–º–≤–æ–ª
		client.symbolsMux.RLock()
		interested := client.symbols[strings.ToUpper(message.Symbol)]
		client.symbolsMux.RUnlock()

		if interested {
			wg.Add(1)
			go func(c *Client) {
				defer wg.Done()

				// –ò–°–ü–û–õ–¨–ó–£–ï–ú –ú–¨–Æ–¢–ï–ö–° –î–õ–Ø –ë–ï–ó–û–ü–ê–°–ù–û–ô –ó–ê–ü–ò–°–ò
				c.writeMux.Lock()
				err := c.conn.WriteJSON(message)
				c.writeMux.Unlock()

				if err != nil {
					// –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
					ws.clientsMux.Lock()
					delete(ws.clients, c.conn)
					ws.clientsMux.Unlock()
					c.conn.Close()
				}
			}(client)
		}
	}
	wg.Wait()
}

func (ws *WebSocketServer) Start() {
	// CORS middleware
	http.HandleFunc("/ws", func(w http.ResponseWriter, r *http.Request) {
		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
		if len(ws.config.Server.CORSOrigins) > 0 {
			origin := r.Header.Get("Origin")
			for _, allowedOrigin := range ws.config.Server.CORSOrigins {
				if allowedOrigin == "*" || allowedOrigin == origin {
					w.Header().Set("Access-Control-Allow-Origin", allowedOrigin)
					break
				}
			}
		} else {
			w.Header().Set("Access-Control-Allow-Origin", "*")
		}

		w.Header().Set("Access-Control-Allow-Methods", "GET, POST, OPTIONS")
		w.Header().Set("Access-Control-Allow-Headers", "Content-Type")

		if r.Method == "OPTIONS" {
			w.WriteHeader(http.StatusOK)
			return
		}

		ws.handleWebSocket(w, r)
	})

	// Health check endpoint
	http.HandleFunc("/health", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Access-Control-Allow-Origin", "*")
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusOK)
		json.NewEncoder(w).Encode(map[string]interface{}{
			"status":        "ok",
			"clients":       len(ws.clients),
			"subscriptions": len(ws.subscriptions),
			"nats_status":   ws.natsConn.Status().String(),
			"symbols":       ws.config.Symbols,
			"markets":       ws.config.Markets,
		})
	})

	// Config endpoint –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	http.HandleFunc("/config", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Access-Control-Allow-Origin", "*")
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusOK)
		json.NewEncoder(w).Encode(ws.config)
	})

	log.Printf("üöÄ WebSocket server starting on port %s", ws.config.Server.Port)
	log.Printf("üì° NATS connection: %s (status: %s)", ws.config.NATS.URL, ws.natsConn.Status().String())
	log.Printf("üí∞ Tracking %d symbols across %d markets", len(ws.config.Symbols), len(ws.config.Markets))

	log.Fatal(http.ListenAndServe(":"+ws.config.Server.Port, nil))
}

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	configPath := "config.json"
	if len(os.Args) > 1 {
		configPath = os.Args[1]
	}

	config, err := loadConfig(configPath)
	if err != nil {
		log.Fatalf("‚ùå Failed to load config: %v", err)
	}

	log.Printf("üìã Loaded config from %s", configPath)

	// –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä
	server, err := NewWebSocketServer(config)
	if err != nil {
		log.Fatalf("‚ùå Failed to create WebSocket server: %v", err)
	}
	defer server.natsConn.Close()

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
	server.Start()
}
