package market

import (
	"fmt"
	"os"
	"os/exec"
	"runtime"
	"sort"
	"strings"
	"sync"
	"time"

	"github.com/fatih/color"
)

// PriceData —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ
type PriceData struct {
	Symbol       string
	SpotPrice    string
	FuturePrice  string
	LastUpdate   time.Time
	SpotChange   string
	FutureChange string
}

// ConsoleDashboard —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Å–æ–ª—å–Ω—ã–º –¥–∞—à–±–æ—Ä–¥–æ–º
type ConsoleDashboard struct {
	data      map[string]*PriceData
	mu        sync.RWMutex
	isRunning bool
	stopChan  chan struct{}
}

// NewConsoleDashboard —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –¥–∞—à–±–æ—Ä–¥
func NewConsoleDashboard() *ConsoleDashboard {
	return &ConsoleDashboard{
		data:     make(map[string]*PriceData),
		stopChan: make(chan struct{}),
	}
}

// clearScreen –æ—á–∏—â–∞–µ—Ç —ç–∫—Ä–∞–Ω
func clearScreen() {
	var cmd *exec.Cmd
	if runtime.GOOS == "windows" {
		cmd = exec.Command("cmd", "/c", "cls")
	} else {
		cmd = exec.Command("clear")
	}
	cmd.Stdout = os.Stdout
	cmd.Run()
}

// moveCursor –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –∫—É—Ä—Å–æ—Ä –≤ –Ω–∞—á–∞–ª–æ
func moveCursor() {
	fmt.Print("\033[H\033[2J") // ANSI escape codes –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –¥–∞—à–±–æ—Ä–¥ (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ MarketDataHandler)
func (cd *ConsoleDashboard) Start() {
	cd.mu.Lock()
	if cd.isRunning {
		cd.mu.Unlock()
		return
	}
	cd.isRunning = true
	cd.mu.Unlock()

	// –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –≤ –Ω–∞—á–∞–ª–µ
	clearScreen()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 500ms –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
	go func() {
		ticker := time.NewTicker(500 * time.Millisecond)
		defer ticker.Stop()

		for {
			select {
			case <-cd.stopChan:
				return
			case <-ticker.C:
				cd.render()
			}
		}
	}()
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞—à–±–æ—Ä–¥ (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ MarketDataHandler)
func (cd *ConsoleDashboard) Stop() {
	cd.mu.Lock()
	defer cd.mu.Unlock()

	if !cd.isRunning {
		return
	}

	cd.isRunning = false
	close(cd.stopChan)
}

// OnSpotPriceUpdate –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–æ—Ç —Ü–µ–Ω—É (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ MarketDataHandler)
func (cd *ConsoleDashboard) OnSpotPriceUpdate(symbol, price string) {
	cd.mu.Lock()
	defer cd.mu.Unlock()

	if cd.data[symbol] == nil {
		cd.data[symbol] = &PriceData{Symbol: symbol}
	}

	// –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ü–µ–Ω–æ–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
	oldPrice := cd.data[symbol].SpotPrice
	cd.data[symbol].SpotPrice = price
	cd.data[symbol].LastUpdate = time.Now()

	if oldPrice != "" && oldPrice != price {
		if price > oldPrice {
			cd.data[symbol].SpotChange = "‚Üó"
		} else {
			cd.data[symbol].SpotChange = "‚Üò"
		}
	} else {
		cd.data[symbol].SpotChange = "‚Üí"
	}
}

// OnFuturesPriceUpdate –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ñ—å—é—á–µ—Ä—Å–Ω—É—é —Ü–µ–Ω—É (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ MarketDataHandler)
func (cd *ConsoleDashboard) OnFuturesPriceUpdate(symbol, price string) {
	cd.mu.Lock()
	defer cd.mu.Unlock()

	if cd.data[symbol] == nil {
		cd.data[symbol] = &PriceData{Symbol: symbol}
	}

	// –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ü–µ–Ω–æ–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
	oldPrice := cd.data[symbol].FuturePrice
	cd.data[symbol].FuturePrice = price
	cd.data[symbol].LastUpdate = time.Now()

	if oldPrice != "" && oldPrice != price {
		if price > oldPrice {
			cd.data[symbol].FutureChange = "‚Üó"
		} else {
			cd.data[symbol].FutureChange = "‚Üò"
		}
	} else {
		cd.data[symbol].FutureChange = "‚Üí"
	}
}

// render –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –¥–∞—à–±–æ—Ä–¥
func (cd *ConsoleDashboard) render() {
	cd.mu.RLock()
	defer cd.mu.RUnlock()

	// –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –Ω–∞—á–∞–ª–æ –≤–º–µ—Å—Ç–æ –æ—á–∏—Å—Ç–∫–∏ —ç–∫—Ä–∞–Ω–∞
	moveCursor()

	var output strings.Builder

	// –ó–∞–≥–æ–ª–æ–≤–æ–∫
	title := color.New(color.FgCyan, color.Bold).Sprint("üöÄ BYBIT MARKET DASHBOARD")
	timestamp := color.New(color.FgWhite).Sprintf("Last Update: %s", time.Now().Format("15:04:05"))

	output.WriteString(fmt.Sprintf("%s\n", title))
	output.WriteString(fmt.Sprintf("%s\n", timestamp))
	output.WriteString(strings.Repeat("‚ïê", 80) + "\n")

	// –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
	header := fmt.Sprintf("%-12s ‚îÇ %-25s ‚îÇ %-25s ‚îÇ %-10s",
		color.New(color.FgYellow, color.Bold).Sprint("SYMBOL"),
		color.New(color.FgGreen, color.Bold).Sprint("SPOT PRICE"),
		color.New(color.FgBlue, color.Bold).Sprint("FUTURES PRICE"),
		color.New(color.FgMagenta, color.Bold).Sprint("STATUS"))

	output.WriteString(header + "\n")
	output.WriteString(strings.Repeat("‚îÄ", 80) + "\n")

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
	symbols := make([]string, 0, len(cd.data))
	for symbol := range cd.data {
		symbols = append(symbols, symbol)
	}
	sort.Strings(symbols)

	// –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
	for _, symbol := range symbols {
		data := cd.data[symbol]
		if data == nil {
			continue
		}

		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã —Å —Ü–≤–µ—Ç–∞–º–∏ –∏ —Å—Ç—Ä–µ–ª–∫–∞–º–∏
		spotPrice := cd.formatPrice(data.SpotPrice, data.SpotChange, color.FgGreen)
		futurePrice := cd.formatPrice(data.FuturePrice, data.FutureChange, color.FgBlue)

		// –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
		status := cd.getConnectionStatus(data)

		row := fmt.Sprintf("%-12s ‚îÇ %-35s ‚îÇ %-35s ‚îÇ %-10s",
			color.New(color.FgWhite, color.Bold).Sprint(symbol),
			spotPrice,
			futurePrice,
			status)

		output.WriteString(row + "\n")
	}

	output.WriteString(strings.Repeat("‚ïê", 80) + "\n")

	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
	stats := cd.getStats()
	output.WriteString(stats + "\n")

	// –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
	for i := 0; i < 10; i++ {
		output.WriteString(strings.Repeat(" ", 80) + "\n")
	}

	// –í—ã–≤–æ–¥–∏–º –≤–µ—Å—å –±–ª–æ–∫ —Å—Ä–∞–∑—É
	fmt.Print(output.String())
}

// formatPrice —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É —Å —Ü–≤–µ—Ç–æ–º –∏ —Å—Ç—Ä–µ–ª–∫–æ–π
func (cd *ConsoleDashboard) formatPrice(price, change string, priceColor color.Attribute) string {
	if price == "" {
		return color.New(color.FgRed).Sprint("N/A")
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Å—Ç—Ä–µ–ª–∫–∏
	var arrowColor color.Attribute
	switch change {
	case "‚Üó":
		arrowColor = color.FgGreen
	case "‚Üò":
		arrowColor = color.FgRed
	default:
		arrowColor = color.FgYellow
	}

	priceStr := color.New(priceColor, color.Bold).Sprint(price)
	arrow := color.New(arrowColor).Sprint(change)

	return fmt.Sprintf("%s %s", priceStr, arrow)
}

// getConnectionStatus –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
func (cd *ConsoleDashboard) getConnectionStatus(data *PriceData) string {
	now := time.Now()
	timeSinceUpdate := now.Sub(data.LastUpdate)

	if timeSinceUpdate < 5*time.Second {
		return color.New(color.FgGreen).Sprint("üü¢ LIVE")
	} else if timeSinceUpdate < 30*time.Second {
		return color.New(color.FgYellow).Sprint("üü° SLOW")
	} else {
		return color.New(color.FgRed).Sprint("üî¥ DEAD")
	}
}

// getStats –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
func (cd *ConsoleDashboard) getStats() string {
	totalSymbols := len(cd.data)
	activeConnections := 0

	for _, data := range cd.data {
		if time.Since(data.LastUpdate) < 30*time.Second {
			activeConnections++
		}
	}

	stats := fmt.Sprintf("üìä Total Symbols: %s | Active Connections: %s | Press Ctrl+C to exit",
		color.New(color.FgCyan, color.Bold).Sprint(totalSymbols),
		color.New(color.FgGreen, color.Bold).Sprint(activeConnections))

	return stats
}
