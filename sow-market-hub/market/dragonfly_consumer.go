package market

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"sync"
	"time"

	"github.com/nats-io/nats.go"
	"github.com/redis/go-redis/v9"
)

// DragonflyConsumer —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –≤ Dragonfly
type DragonflyConsumer struct {
	nc          *nats.Conn
	redisClient *redis.Client
	isRunning   bool
	mu          sync.Mutex
	ctx         context.Context
}

// NewDragonflyConsumer —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π Dragonfly consumer
func NewDragonflyConsumer(natsURL, dragonflyURL string) (*DragonflyConsumer, error) {
	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ NATS
	if natsURL == "" {
		natsURL = nats.DefaultURL
	}

	nc, err := nats.Connect(natsURL,
		nats.MaxReconnects(-1),
		nats.ReconnectWait(time.Second*5),
	)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ NATS: %w", err)
	}

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Dragonfly
	if dragonflyURL == "" {
		dragonflyURL = "localhost:6379" // —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä—Ç Dragonfly
	}

	redisClient := redis.NewClient(&redis.Options{
		Addr:     dragonflyURL,
		Password: "", // –±–µ–∑ –ø–∞—Ä–æ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		DB:       0,  // –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö 0
	})

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
	ctx := context.Background()
	_, err = redisClient.Ping(ctx).Result()
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Dragonfly: %w", err)
	}

	return &DragonflyConsumer{
		nc:          nc,
		redisClient: redisClient,
		ctx:         ctx,
	}, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç consumer
func (dc *DragonflyConsumer) Start() {
	dc.mu.Lock()
	defer dc.mu.Unlock()

	dc.isRunning = true

	symbols := []string{"btcusdt", "ethusdt", "bnbusdt", "solusdt"}
	markets := []string{"spot", "futures"}

	log.Println("üíæ Dragonfly Consumer –∑–∞–ø—É—â–µ–Ω")

	for _, symbol := range symbols {
		for _, market := range markets {
			subject := fmt.Sprintf("quotes.%s.%s", market, symbol)

			_, err := dc.nc.Subscribe(subject, func(m *nats.Msg) {
				dc.handleQuote(m)
			})

			if err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ %s: %v", subject, err)
			} else {
				log.Printf("‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ %s –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Dragonfly", subject)
			}
		}
	}
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç consumer
func (dc *DragonflyConsumer) Stop() {
	dc.mu.Lock()
	defer dc.mu.Unlock()

	dc.isRunning = false
	if dc.nc != nil {
		dc.nc.Close()
	}
	if dc.redisClient != nil {
		dc.redisClient.Close()
	}
	log.Println("üõë Dragonfly Consumer –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}

// handleQuote –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
func (dc *DragonflyConsumer) handleQuote(m *nats.Msg) {
	var quote QuoteData
	err := json.Unmarshal(m.Data, &quote)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏: %v", err)
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ü–µ–ª–µ–π
	dc.saveLatestPrice(quote)    // –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞
	dc.saveHistoricalData(quote) // –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
	dc.saveToTimeSeries(quote)   // –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã
	dc.updateStatistics(quote)   // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

	log.Printf("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Dragonfly: [%s] %s = %.4f",
		quote.Market, quote.Symbol, quote.Price)
}

// saveLatestPrice —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É (–¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞)
func (dc *DragonflyConsumer) saveLatestPrice(quote QuoteData) {
	key := fmt.Sprintf("latest:%s:%s", quote.Market, quote.Symbol)

	data := map[string]interface{}{
		"price":     quote.Price,
		"timestamp": quote.Timestamp.Unix(),
	}

	err := dc.redisClient.HMSet(dc.ctx, key, data).Err()
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–µ–Ω—ã: %v", err)
	}
}

// saveHistoricalData —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
func (dc *DragonflyConsumer) saveHistoricalData(quote QuoteData) {
	key := fmt.Sprintf("history:%s:%s", quote.Market, quote.Symbol)

	data := map[string]interface{}{
		"price":     quote.Price,
		"timestamp": quote.Timestamp.Unix(),
	}

	jsonData, _ := json.Marshal(data)

	// –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∑–∞–ø–∏—Å–µ–π)
	pipe := dc.redisClient.Pipeline()
	pipe.LPush(dc.ctx, key, jsonData)
	pipe.LTrim(dc.ctx, key, 0, 999) // –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000
	_, err := pipe.Exec(dc.ctx)

	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: %v", err)
	}
}

// saveToTimeSeries —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã (–ø–æ –¥–Ω—è–º)
func (dc *DragonflyConsumer) saveToTimeSeries(quote QuoteData) {
	// –ö–ª—é—á –ø–æ –¥–∞—Ç–µ: timeseries:SPOT:BTCUSDT:2024-10-15
	dateKey := quote.Timestamp.Format("2006-01-02")
	key := fmt.Sprintf("timeseries:%s:%s:%s", quote.Market, quote.Symbol, dateKey)

	// Timestamp –∫–∞–∫ score –¥–ª—è sorted set
	score := float64(quote.Timestamp.Unix())
	member := fmt.Sprintf("%.4f", quote.Price)

	err := dc.redisClient.ZAdd(dc.ctx, key, redis.Z{
		Score:  score,
		Member: member,
	}).Err()

	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞: %v", err)
	}
}

// updateStatistics –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
func (dc *DragonflyConsumer) updateStatistics(quote QuoteData) {
	statsKey := fmt.Sprintf("stats:%s:%s", quote.Market, quote.Symbol)

	pipe := dc.redisClient.Pipeline()

	// –°—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
	pipe.Incr(dc.ctx, statsKey+":count")

	// –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
	pipe.Set(dc.ctx, statsKey+":last_update", quote.Timestamp.Unix(), 0)

	// –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –¥–µ–Ω—å
	dateKey := quote.Timestamp.Format("2006-01-02")
	pipe.ZAdd(dc.ctx, statsKey+":daily_min:"+dateKey, redis.Z{Score: quote.Price, Member: "min"})
	pipe.ZAdd(dc.ctx, statsKey+":daily_max:"+dateKey, redis.Z{Score: quote.Price, Member: "max"})

	_, err := pipe.Exec(dc.ctx)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %v", err)
	}
}

// StartDragonflyConsumer –ø—É–±–ª–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞
func StartDragonflyConsumer(natsURL, dragonflyURL string) (*DragonflyConsumer, error) {
	consumer, err := NewDragonflyConsumer(natsURL, dragonflyURL)
	if err != nil {
		return nil, err
	}

	consumer.Start()
	return consumer, nil
}
