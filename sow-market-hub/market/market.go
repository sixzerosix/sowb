package market

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"os"
	"os/signal"
	"sync"
	"syscall"
	"time"

	"github.com/hirokisan/bybit/v2"
	"github.com/sirupsen/logrus"
)

// Config —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
type Config struct {
	Symbols          []string `json:"symbols"`
	ReconnectTimeout int      `json:"reconnect_timeout_seconds"`
	MaxRetries       int      `json:"max_retries"`
	LogLevel         string   `json:"log_level"`
}

// MarketDataHandler –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
type MarketDataHandler interface {
	OnSpotPriceUpdate(symbol, price string)
	OnFuturesPriceUpdate(symbol, price string)
	Start()
	Stop()
}

// MarketListener –æ—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
type MarketListener struct {
	config      *Config
	logger      *logrus.Logger
	wsClient    *bybit.WebSocketClient
	ctx         context.Context
	cancel      context.CancelFunc
	wg          sync.WaitGroup
	isRunning   bool
	mu          sync.RWMutex
	dataHandler MarketDataHandler // –î–æ–±–∞–≤–ª—è–µ–º handler –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
}

// NewMarketListener —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
func NewMarketListener() *MarketListener {
	logger := logrus.New()
	logger.SetFormatter(&logrus.JSONFormatter{})

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
	config := LoadConfig()

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	level, err := logrus.ParseLevel(config.LogLevel)
	if err != nil {
		level = logrus.InfoLevel
	}

	// –û–¢–ö–õ–Æ–ß–ê–ï–ú –í–´–í–û–î –õ–û–ì–û–í –í –ö–û–ù–°–û–õ–¨ –î–õ–Ø –î–ê–®–ë–û–†–î–ê
	logger.SetOutput(os.NewFile(0, os.DevNull)) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏ –≤ –Ω–∏–∫—É–¥–∞
	logger.SetLevel(level)

	ctx, cancel := context.WithCancel(context.Background())

	return &MarketListener{
		config:   config,
		logger:   logger,
		wsClient: bybit.NewWebsocketClient(),
		ctx:      ctx,
		cancel:   cancel,
	}
}

// SetDataHandler —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö
func (ml *MarketListener) SetDataHandler(handler MarketDataHandler) {
	ml.dataHandler = handler
}

// LoadConfig –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
func LoadConfig() *Config {
	// –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞
	if data, err := os.ReadFile("config.json"); err == nil {
		var config Config
		if json.Unmarshal(data, &config) == nil {
			return &config
		}
	}

	// –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
	return &Config{
		Symbols: []string{
			"BTCUSDT",
			"ETHUSDT",
			"BNBUSDT",
			"SOLUSDT",
		},
		ReconnectTimeout: 5,
		MaxRetries:       10,
		LogLevel:         "info",
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
func (ml *MarketListener) Start() error {
	ml.mu.Lock()
	if ml.isRunning {
		ml.mu.Unlock()
		return fmt.Errorf("listener already running")
	}
	ml.isRunning = true
	ml.mu.Unlock()

	ml.logger.Info("üöÄ –ó–∞–ø—É—Å–∫ Market Listener...")

	// –ó–∞–ø—É—Å–∫–∞–µ–º data handler –µ—Å–ª–∏ –µ—Å—Ç—å
	if ml.dataHandler != nil {
		ml.dataHandler.Start()
	}

	// Graceful shutdown
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, os.Interrupt, syscall.SIGTERM)

	go func() {
		<-sigChan
		ml.logger.Info("üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
		ml.Stop()
	}()

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å retry –ª–æ–≥–∏–∫–æ–π
	return ml.startWithRetry()
}

// startWithRetry –∑–∞–ø—É—Å–∫ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
func (ml *MarketListener) startWithRetry() error {
	retries := 0

	for retries < ml.config.MaxRetries {
		select {
		case <-ml.ctx.Done():
			return nil
		default:
		}

		if retries > 0 {
			ml.logger.WithField("retry", retries).Warn("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
			time.Sleep(time.Duration(ml.config.ReconnectTimeout) * time.Second)
		}

		if err := ml.connectAndListen(); err != nil {
			retries++
			ml.logger.WithError(err).WithField("retry", retries).Error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
			continue
		}

		// –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
		retries = 0
	}

	return fmt.Errorf("–ø—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
}

// connectAndListen –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
func (ml *MarketListener) connectAndListen() error {
	var executors []bybit.WebsocketExecutor

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –°–ü–û–¢
	if err := ml.setupSpotConnection(&executors); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –°–ü–û–¢: %w", err)
	}

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –§–¨–Æ–ß–ï–†–°–ê–ú
	if err := ml.setupFuturesConnection(&executors); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –§–¨–Æ–ß–ï–†–°–û–í: %w", err)
	}

	ml.logger.Info("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (–°–ü–û–¢ + –§–¨–Æ–ß–ï–†–°–´)")

	// –ó–∞–ø—É—Å–∫ WebSocket –∫–ª–∏–µ–Ω—Ç–∞
	ml.wg.Add(1)
	go func() {
		defer ml.wg.Done()
		ml.wsClient.Start(ml.ctx, executors)
	}()

	// –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	ml.wg.Wait()
	return nil
}

// setupSpotConnection –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–ø–æ—Ç—É
func (ml *MarketListener) setupSpotConnection(executors *[]bybit.WebsocketExecutor) error {
	ml.logger.Info("üìç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ V5 API –°–ü–û–¢...")

	v5SpotPublic, err := ml.wsClient.V5().Public(bybit.CategoryV5Spot)
	if err != nil {
		return err
	}

	successCount := 0
	for _, symbol := range ml.config.Symbols {
		sym := symbol

		_, err := v5SpotPublic.SubscribeTicker(
			bybit.V5WebsocketPublicTickerParamKey{
				Symbol: bybit.SymbolV5(sym),
			},
			func(response bybit.V5WebsocketPublicTickerResponse) error {
				ml.handleSpotTicker(sym, response)
				return nil
			},
		)

		if err != nil {
			ml.logger.WithError(err).WithField("symbol", sym).Error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –°–ü–û–¢ —Ç–∏–∫–µ—Ä")
			continue
		}

		ml.logger.WithField("symbol", sym).Info("‚úì –ü–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –°–ü–û–¢ —Ç–∏–∫–µ—Ä")
		successCount++
	}

	if successCount == 0 {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∏ –Ω–∞ –æ–¥–∏–Ω –°–ü–û–¢ —Å–∏–º–≤–æ–ª")
	}

	*executors = append(*executors, v5SpotPublic)
	return nil
}

// setupFuturesConnection –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ñ—å—é—á–µ—Ä—Å–∞–º
func (ml *MarketListener) setupFuturesConnection(executors *[]bybit.WebsocketExecutor) error {
	ml.logger.Info("üìç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ V5 API –î–ï–†–ò–í–ê–¢–ò–í–´...")

	v5LinearPublic, err := ml.wsClient.V5().Public(bybit.CategoryV5Linear)
	if err != nil {
		return err
	}

	successCount := 0
	for _, symbol := range ml.config.Symbols {
		sym := symbol

		_, err := v5LinearPublic.SubscribeTicker(
			bybit.V5WebsocketPublicTickerParamKey{
				Symbol: bybit.SymbolV5(sym),
			},
			func(response bybit.V5WebsocketPublicTickerResponse) error {
				ml.handleFuturesTicker(sym, response)
				return nil
			},
		)

		if err != nil {
			ml.logger.WithError(err).WithField("symbol", sym).Error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ FUTURES —Ç–∏–∫–µ—Ä")
			continue
		}

		ml.logger.WithField("symbol", sym).Info("‚úì –ü–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ FUTURES —Ç–∏–∫–µ—Ä")
		successCount++
	}

	if successCount == 0 {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∏ –Ω–∞ –æ–¥–∏–Ω FUTURES —Å–∏–º–≤–æ–ª")
	}

	*executors = append(*executors, v5LinearPublic)
	return nil
}

// handleSpotTicker –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–ø–æ—Ç–∞
func (ml *MarketListener) handleSpotTicker(symbol string, response bybit.V5WebsocketPublicTickerResponse) {
	price := response.Data.Spot.LastPrice
	if price == "" {
		ml.logger.WithField("symbol", symbol).Debug("–ü—É—Å—Ç–∞—è —Ü–µ–Ω–∞ –≤ –°–ü–û–¢ —Ç–∏–∫–µ—Ä–µ")
		return
	}

	ml.logger.WithFields(logrus.Fields{
		"market": "SPOT",
		"symbol": symbol,
		"price":  price,
	}).Info("üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã")

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ handler –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
	if ml.dataHandler != nil {
		ml.dataHandler.OnSpotPriceUpdate(symbol, price)
	} else {
		fmt.Printf("SPOT:%s - –¶–µ–Ω–∞: %s\n", symbol, price)
	}
}

// handleFuturesTicker –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ—å—é—á–µ—Ä—Å–æ–≤
func (ml *MarketListener) handleFuturesTicker(symbol string, response bybit.V5WebsocketPublicTickerResponse) {
	price := response.Data.LinearInverse.LastPrice
	if price == "" {
		ml.logger.WithField("symbol", symbol).Debug("–ü—É—Å—Ç–∞—è —Ü–µ–Ω–∞ –≤ FUTURES —Ç–∏–∫–µ—Ä–µ")
		return
	}

	ml.logger.WithFields(logrus.Fields{
		"market": "FUTURES",
		"symbol": symbol,
		"price":  price,
	}).Info("üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã")

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ handler –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
	if ml.dataHandler != nil {
		ml.dataHandler.OnFuturesPriceUpdate(symbol, price)
	} else {
		fmt.Printf("FUTURES:%s - –¶–µ–Ω–∞: %s\n", symbol, price)
	}
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
func (ml *MarketListener) Stop() {
	ml.mu.Lock()
	defer ml.mu.Unlock()

	if !ml.isRunning {
		return
	}

	ml.logger.Info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º data handler –µ—Å–ª–∏ –µ—Å—Ç—å
	if ml.dataHandler != nil {
		ml.dataHandler.Stop()
	}

	ml.cancel()
	ml.isRunning = false

	// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ—Ä—É—Ç–∏–Ω —Å —Ç–∞–π–º–∞—É—Ç–æ–º
	done := make(chan struct{})
	go func() {
		ml.wg.Wait()
		close(done)
	}()

	select {
	case <-done:
		ml.logger.Info("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
	case <-time.After(10 * time.Second):
		ml.logger.Warn("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã")
	}
}

// StartListener –ø—É–±–ª–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
func StartListener() {
	listener := NewMarketListener()
	if err := listener.Start(); err != nil {
		log.Fatalf("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: %v", err)
	}
}

// StartListenerWithDashboard –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å –∫–æ–Ω—Å–æ–ª—å–Ω—ã–º –¥–∞—à–±–æ—Ä–¥–æ–º
// StartListenerWithDashboard –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å –∫–æ–Ω—Å–æ–ª—å–Ω—ã–º –¥–∞—à–±–æ—Ä–¥–æ–º –ë–ï–ó –õ–û–ì–û–í
func StartListenerWithDashboard() {
	listener := NewMarketListener()

	// –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
	listener.logger.SetOutput(io.Discard)

	dashboard := NewConsoleDashboard()
	listener.SetDataHandler(dashboard)

	if err := listener.Start(); err != nil {
		log.Fatalf("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: %v", err)
	}
}

// StartListenerWithNATS –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π –≤ NATS
func StartListenerWithNATS(natsURL string) {
	listener := NewMarketListener()

	natsPublisher, err := NewNATSPublisher(natsURL)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è NATS publisher: %v", err)
	}

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º NATS publisher –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö
	listener.SetDataHandler(natsPublisher)

	if err := listener.Start(); err != nil {
		log.Fatalf("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: %v", err)
	}
}

// CombinedHandler –∫–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
type CombinedHandler struct {
	handlers []MarketDataHandler
}

// NewCombinedHandler —Å–æ–∑–¥–∞–µ—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
func NewCombinedHandler(handlers ...MarketDataHandler) *CombinedHandler {
	return &CombinedHandler{
		handlers: handlers,
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
func (ch *CombinedHandler) Start() {
	for _, handler := range ch.handlers {
		handler.Start()
	}
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
func (ch *CombinedHandler) Stop() {
	for _, handler := range ch.handlers {
		handler.Stop()
	}
}

// OnSpotPriceUpdate –ø–µ—Ä–µ–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º
func (ch *CombinedHandler) OnSpotPriceUpdate(symbol, price string) {
	for _, handler := range ch.handlers {
		handler.OnSpotPriceUpdate(symbol, price)
	}
}

// OnFuturesPriceUpdate –ø–µ—Ä–µ–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º
func (ch *CombinedHandler) OnFuturesPriceUpdate(symbol, price string) {
	for _, handler := range ch.handlers {
		handler.OnFuturesPriceUpdate(symbol, price)
	}
}

// StartListenerWithBoth –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏ —Å –¥–∞—à–±–æ—Ä–¥–æ–º, –∏ —Å NATS –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
func StartListenerWithBoth(natsURL string) {
	listener := NewMarketListener()

	// –°–æ–∑–¥–∞–µ–º –æ–±–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
	dashboard := NewConsoleDashboard()
	natsPublisher, err := NewNATSPublisher(natsURL)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è NATS publisher: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
	combinedHandler := NewCombinedHandler(dashboard, natsPublisher)
	listener.SetDataHandler(combinedHandler)

	if err := listener.Start(); err != nil {
		log.Fatalf("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: %v", err)
	}
}
