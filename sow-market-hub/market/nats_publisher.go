package market

import (
	"encoding/json"
	"fmt"
	"log"
	"strconv"
	"strings"
	"sync" // –ò–º–ø–æ—Ä—Ç –º—å—é—Ç–µ–∫—Å–∞
	"time"

	"github.com/nats-io/nats.go"
)

// NATSPublisher —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ NATS
type NATSPublisher struct {
	nc        *nats.Conn
	isRunning bool
	mu        sync.Mutex // –î–æ–±–∞–≤–ª—è–µ–º –º—å—é—Ç–µ–∫—Å
}

// NewNATSPublisher —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π NATS publisher
func NewNATSPublisher(natsURL string) (MarketDataHandler, error) { // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
	if natsURL == "" {
		natsURL = nats.DefaultURL // "nats://localhost:4222"
	}

	nc, err := nats.Connect(natsURL,
		nats.MaxReconnects(-1),
		nats.ReconnectWait(time.Second*5),
		nats.DisconnectErrHandler(func(nc *nats.Conn, err error) {
			log.Printf("NATS disconnected: %v. Reconnecting...", err)
		}),
		nats.ReconnectHandler(func(nc *nats.Conn) {
			log.Println("NATS reconnected!")
		}),
		nats.ClosedHandler(func(nc *nats.Conn) {
			if nc.LastError() != nil {
				log.Fatalf("NATS connection closed: %v", nc.LastError())
			}
			log.Println("NATS connection closed gracefully.")
		}),
	)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ NATS: %w", err)
	}

	return &NATSPublisher{
		nc: nc,
	}, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç publisher (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ MarketDataHandler)
func (np *NATSPublisher) Start() {
	np.mu.Lock()
	defer np.mu.Unlock()
	np.isRunning = true
	log.Println("üöÄ NATS Publisher –∑–∞–ø—É—â–µ–Ω")
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç publisher (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ MarketDataHandler)
func (np *NATSPublisher) Stop() {
	np.mu.Lock()
	defer np.mu.Unlock()
	np.isRunning = false
	if np.nc != nil {
		np.nc.Close()
	}
	log.Println("üõë NATS Publisher –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}

// OnSpotPriceUpdate –ø—É–±–ª–∏–∫—É–µ—Ç —Å–ø–æ—Ç —Ü–µ–Ω—É (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ MarketDataHandler)
func (np *NATSPublisher) OnSpotPriceUpdate(symbol, price string) {
	np.mu.Lock() // –ó–∞—â–∏—â–∞–µ–º —á—Ç–µ–Ω–∏–µ isRunning
	if !np.isRunning {
		np.mu.Unlock()
		return
	}
	np.mu.Unlock()

	priceFloat, err := strconv.ParseFloat(price, 64)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–µ–Ω—ã %s: %v", price, err)
		return
	}

	quote := QuoteData{
		Symbol:    symbol,
		Price:     priceFloat,
		Market:    "SPOT",
		Timestamp: time.Now(),
	}

	np.publishQuote(quote, "spot")
}

// OnFuturesPriceUpdate –ø—É–±–ª–∏–∫—É–µ—Ç —Ñ—å—é—á–µ—Ä—Å–Ω—É—é —Ü–µ–Ω—É (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ MarketDataHandler)
func (np *NATSPublisher) OnFuturesPriceUpdate(symbol, price string) {
	np.mu.Lock() // –ó–∞—â–∏—â–∞–µ–º —á—Ç–µ–Ω–∏–µ isRunning
	if !np.isRunning {
		np.mu.Unlock()
		return
	}
	np.mu.Unlock()

	priceFloat, err := strconv.ParseFloat(price, 64)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–µ–Ω—ã %s: %v", price, err)
		return
	}

	quote := QuoteData{
		Symbol:    symbol,
		Price:     priceFloat,
		Market:    "FUTURES",
		Timestamp: time.Now(),
	}

	np.publishQuote(quote, "futures")
}

// publishQuote –ø—É–±–ª–∏–∫—É–µ—Ç –∫–æ—Ç–∏—Ä–æ–≤–∫—É –≤ NATS
func (np *NATSPublisher) publishQuote(quote QuoteData, marketType string) {
	data, err := json.Marshal(quote)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JSON: %v", err)
		return
	}

	subject := fmt.Sprintf("quotes.%s.%s", marketType, strings.ToLower(quote.Symbol))

	err = np.nc.Publish(subject, data)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ %s: %v", subject, err)
	} else {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º log.Printf –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
		log.Printf("üì° –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ NATS [%s]: %s = %.4f\n", subject, quote.Symbol, quote.Price)
	}
}
