package market

import (
	"encoding/json"
	"fmt"
	"log"
	"os"
	"os/signal"
	"sync"
	"syscall"
	"time"

	"github.com/nats-io/nats.go"
)

// MarketSubscriber —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
type MarketSubscriber struct {
	nc        *nats.Conn
	isRunning bool
	mu        sync.Mutex
}

// StartSubscriber —Å–æ–∑–¥–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç subscriber (–ø—É–±–ª–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
func StartSubscriber(natsURL string) (*MarketSubscriber, error) {
	if natsURL == "" {
		natsURL = nats.DefaultURL
	}

	nc, err := nats.Connect(natsURL,
		nats.MaxReconnects(-1),
		nats.ReconnectWait(time.Second*5),
		nats.DisconnectErrHandler(func(nc *nats.Conn, err error) {
			log.Printf("NATS disconnected: %v. Reconnecting...", err)
		}),
		nats.ReconnectHandler(func(nc *nats.Conn) {
			log.Println("NATS reconnected!")
		}),
		nats.ClosedHandler(func(nc *nats.Conn) {
			if nc.LastError() != nil {
				log.Fatalf("NATS connection closed: %v", nc.LastError())
			}
			log.Println("NATS connection closed gracefully.")
		}),
	)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ NATS: %w", err)
	}

	subscriber := &MarketSubscriber{
		nc: nc,
	}

	return subscriber, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
func (ms *MarketSubscriber) Start() {
	ms.mu.Lock()
	defer ms.mu.Unlock()

	ms.isRunning = true

	symbols := []string{"btcusdt", "ethusdt", "bnbusdt", "solusdt"}
	markets := []string{"spot", "futures"}

	log.Println("üì° NATS Subscriber –∑–∞–ø—É—â–µ–Ω")

	for _, symbol := range symbols {
		for _, market := range markets {
			subject := fmt.Sprintf("quotes.%s.%s", market, symbol)

			_, err := ms.nc.Subscribe(subject, func(m *nats.Msg) {
				ms.handleQuote(m)
			})

			if err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ %s: %v", subject, err)
			} else {
				log.Printf("‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ %s", subject)
			}
		}
	}
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç subscriber
func (ms *MarketSubscriber) Stop() {
	ms.mu.Lock()
	defer ms.mu.Unlock()

	ms.isRunning = false
	if ms.nc != nil {
		ms.nc.Close()
	}
	log.Println("üõë NATS Subscriber –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}

// handleQuote –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
func (ms *MarketSubscriber) handleQuote(m *nats.Msg) {
	var quote QuoteData
	err := json.Unmarshal(m.Data, &quote)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏: %v", err)
		return
	}

	marketIcon := "üìà"
	if quote.Market == "FUTURES" {
		marketIcon = "üîÆ"
	}

	log.Printf("%s [%s] %s: %.4f @ %s",
		marketIcon,
		quote.Market,
		quote.Symbol,
		quote.Price,
		quote.Timestamp.Format("15:04:05.000"),
	)
}

// –ò–°–ü–†–ê–í–¨ –≠–¢–ò –§–£–ù–ö–¶–ò–ò - –¥–æ–±–∞–≤—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é handleQuote
// handleQuote –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π (–Ω–µ –º–µ—Ç–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã)
func handleQuote(m *nats.Msg, marketType string) {
	var quote QuoteData
	err := json.Unmarshal(m.Data, &quote)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JSON: %v\n", err)
		return
	}

	marketIcon := "üìà"
	if quote.Market == "FUTURES" {
		marketIcon = "üîÆ"
	}

	fmt.Printf("%s [%s] %s: %.4f @ %s (–æ—Ç %s)\n",
		marketIcon,
		quote.Market,
		quote.Symbol,
		quote.Price,
		quote.Timestamp.Format("15:04:05.000"),
		m.Subject,
	)
}

// SubscribeToSymbol –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª
func SubscribeToSymbol(symbol string) {
	nc, err := nats.Connect(nats.DefaultURL)
	if err != nil {
		log.Fatal(err)
	}
	defer nc.Close()

	// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª (–∏ —Å–ø–æ—Ç, –∏ —Ñ—å—é—á–µ—Ä—Å—ã)
	spotSubject := fmt.Sprintf("quotes.spot.%s", symbol)
	futuresSubject := fmt.Sprintf("quotes.futures.%s", symbol)

	nc.Subscribe(spotSubject, func(m *nats.Msg) {
		handleQuote(m, "SPOT")
	})

	nc.Subscribe(futuresSubject, func(m *nats.Msg) {
		handleQuote(m, "FUTURES")
	})

	fmt.Printf("üì° –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ %s (—Å–ø–æ—Ç –∏ —Ñ—å—é—á–µ—Ä—Å—ã)\n", symbol)

	// Graceful shutdown
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, os.Interrupt, syscall.SIGTERM)
	<-sigChan
}

// SubscribeToAll –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –≤—Å–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—è wildcard
func SubscribeToAll() {
	nc, err := nats.Connect(nats.DefaultURL)
	if err != nil {
		log.Fatal(err)
	}
	defer nc.Close()

	// Wildcard –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
	_, err = nc.Subscribe("quotes.*.*", func(m *nats.Msg) {
		handleQuote(m, "ALL")
	})

	if err != nil {
		log.Fatal(err)
	}

	fmt.Println("üì° –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –í–°–ï –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ (quotes.*.*)")

	// Graceful shutdown
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, os.Interrupt, syscall.SIGTERM)
	<-sigChan
}
