import asyncio
import logging
from datetime import datetime
import signal
import sys

from config import config
from database import DatabaseManager
from strategy import ScalpingStrategyS  # –°–∫–∞–ª—å–ø–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
from exchange import BybitPublicExchange
from telegram_bot import TelegramBot
from risk_manager import RiskManager
from utils import setup_logging


class HighFrequencyTradingBot:
    def __init__(self):
        self.config = config
        self.db_manager = None
        self.strategy = None
        self.exchange = None
        self.telegram_bot = None
        self.risk_manager = None
        self.running = False
        self.position_timers = {}  # –¢–∞–π–º–µ—Ä—ã –¥–ª—è –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞"""
        try:
            logging.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –°–ö–ê–õ–¨–ü–ò–ù–ì –±–æ—Ç–∞ '–°—Ç—Ä–∞—Ç–µ–≥–∏—è S'")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            self.db_manager = DatabaseManager(self.config.DATABASE_PATH)
            await self.db_manager.init_database()
            logging.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂–∏
            self.exchange = BybitPublicExchange(self.config)
            await self.exchange.initialize()
            logging.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫–∞–ª—å–ø–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            self.strategy = ScalpingStrategyS(self.config, self.db_manager)
            logging.info("‚úÖ –°–∫–∞–ª—å–ø–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä–∞
            self.risk_manager = RiskManager(self.config, self.db_manager)
            logging.info("‚úÖ –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
            if self.config.TELEGRAM_TOKEN:
                self.telegram_bot = TelegramBot(
                    self.config, self.db_manager, self.strategy, self.exchange
                )
                logging.info("‚úÖ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            logging.info("üéØ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –°–ö–ê–õ–¨–ü–ò–ù–ì –ë–û–¢–ê –ì–û–¢–û–í–´!")
            logging.info(f"‚ö° –†–µ–∂–∏–º: {self.config.TRADING_MODE}")
            logging.info(f"‚ö° –¢–∞–π–º—Ñ—Ä–µ–π–º: {self.config.TIMEFRAME}")
            logging.info(f"‚ö° –ü–ª–µ—á–æ: {self.config.LEVERAGE}x")
            logging.info(f"‚ö° –°–∏–º–≤–æ–ª—ã: {self.config.SYMBOLS}")

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            raise

    async def start_data_collection(self):
        """–ë–´–°–¢–†–´–ô —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞"""
        while self.running:
            try:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ 1-–º–∏–Ω—É—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–±—ã—Å—Ç—Ä–æ!)
                ohlcv_data = await self.exchange.fetch_ohlcv_batch(
                    self.config.SYMBOLS,
                    self.config.TIMEFRAME,  # 1m
                    50,  # –ú–µ–Ω—å—à–µ –¥–∞–Ω–Ω—ã—Ö = –±–æ–ª—å—à–µ —Å–∫–æ—Ä–æ—Å—Ç—å
                )

                # –ë—ã—Å—Ç—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π
                for symbol, data in ohlcv_data.items():
                    if data:
                        formatted_data = []
                        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–≤–µ—á–µ–π –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                        for candle in data[-10:]:
                            formatted_data.append(
                                {
                                    "timestamp": candle[0],
                                    "symbol": symbol,
                                    "timeframe": self.config.TIMEFRAME,
                                    "open": candle[1],
                                    "high": candle[2],
                                    "low": candle[3],
                                    "close": candle[4],
                                    "volume": candle[5],
                                }
                            )

                        await self.db_manager.insert_ohlcv_batch(formatted_data)

                logging.info(
                    f"‚ö° –°–ö–ê–õ–¨–ü–ò–ù–ì: –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è {len(ohlcv_data)} —Å–∏–º–≤–æ–ª–æ–≤"
                )

                # –ë–´–°–¢–†–ê–Ø –ø–∞—É–∑–∞ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
                await asyncio.sleep(
                    getattr(self.config, "DATA_UPDATE_INTERVAL", 10)
                )  # 10 —Å–µ–∫—É–Ω–¥

            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–ª—å–ø–∏–Ω–≥ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
                await asyncio.sleep(30)

    async def start_signal_generation(self):
        """–ë–´–°–¢–†–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞"""
        while self.running:
            try:
                for symbol in self.config.SYMBOLS:
                    # –°–∫–∞–ª—å–ø–∏–Ω–≥ –∞–Ω–∞–ª–∏–∑ (–±—ã—Å—Ç—Ä—ã–π!)
                    signal = await self.strategy.analyze_symbol_scalping(symbol)

                    if signal.action != "HOLD":
                        logging.info(
                            f"‚ö° –°–ö–ê–õ–¨–ü–ò–ù–ì –°–ò–ì–ù–ê–õ {symbol}: {signal.action} at ${signal.price:.4f} "
                            f"(confidence: {signal.confidence:.2%}) "
                            f"RR: 1:{signal.risk_reward:.2f} "
                            f"SL: ${signal.stop_loss:.2f} TP: ${signal.take_profit:.2f}"
                        )

                        # Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        if self.telegram_bot:
                            await self.send_scalping_notification(signal)

                        # –ë—ã—Å—Ç—Ä–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                        min_confidence = getattr(
                            self.config, "MIN_CONFIDENCE_FOR_TRADE", 0.6
                        )
                        if signal.confidence > min_confidence:
                            await self.execute_scalping_signal(signal)

                    # –ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–∏–º–≤–æ–ª—É
                    await asyncio.sleep(0.5)  # 0.5 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏

                # –ë–´–°–¢–†–ê–Ø –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                signal_interval = getattr(self.config, "SIGNAL_CHECK_INTERVAL", 5)
                await asyncio.sleep(signal_interval)  # 5 —Å–µ–∫—É–Ω–¥

            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∫–∞–ª—å–ø–∏–Ω–≥ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
                await asyncio.sleep(10)

    async def execute_scalping_signal(self, signal):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫–∞–ª—å–ø–∏–Ω–≥ —Å–∏–≥–Ω–∞–ª–∞ —Å –ø–ª–µ—á–æ–º"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
            if not await self.risk_manager.can_open_position(signal.symbol):
                logging.warning(
                    f"‚ö†Ô∏è –°–ö–ê–õ–¨–ü–ò–ù–ì –ø–æ–∑–∏—Ü–∏—é –ø–æ {signal.symbol} –æ—Ç–∫—Ä—ã—Ç—å –Ω–µ–ª—å–∑—è"
                )
                return

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
            account_info = await self.exchange.get_account_info()
            balance = account_info.get("balance", {}).get("USDT", {}).get("free", 0)

            min_balance = getattr(self.config, "MIN_BALANCE_FOR_SCALPING", 50)
            if balance < min_balance:
                logging.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞: ${balance}")
                return

            # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
            base_position_size = await self.risk_manager.calculate_position_size(
                signal.symbol, signal.price, signal.stop_loss, balance
            )

            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–ª–µ—á–∞ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
            leverage = getattr(self.config, "LEVERAGE", 1)
            min_confidence_for_leverage = getattr(
                self.config, "MIN_CONFIDENCE_FOR_LEVERAGE", 0.8
            )

            if signal.confidence > min_confidence_for_leverage:
                position_size = base_position_size * leverage
                actual_leverage = leverage
            else:
                position_size = base_position_size
                actual_leverage = 1

            if position_size <= 0:
                return

            # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –î–ï–ú–û –æ—Ä–¥–µ—Ä–∞ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
            order = await self.place_scalping_order(
                signal, position_size, actual_leverage
            )

            if order and not order.get("error"):
                logging.info(
                    f"üéØ –°–ö–ê–õ–¨–ü–ò–ù–ì –û–†–î–ï–† –ò–°–ü–û–õ–ù–ï–ù: {signal.symbol} {signal.action} "
                    f"{position_size:.6f} at ${signal.price:.4f} "
                    f"–ü–ª–µ—á–æ: {actual_leverage}x "
                    f"Confidence: {signal.confidence:.1%}"
                )

                # –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
                max_duration = getattr(
                    self.config, "MAX_TRADE_DURATION", 900
                )  # 15 –º–∏–Ω—É—Ç
                asyncio.create_task(
                    self.auto_close_scalping_position(signal.symbol, max_duration)
                )

            else:
                error_msg = (
                    order.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    if order
                    else "–û—Ä–¥–µ—Ä –Ω–µ —Å–æ–∑–¥–∞–Ω"
                )
                logging.error(
                    f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–ª—å–ø–∏–Ω–≥ –æ—Ä–¥–µ—Ä–∞ {signal.symbol}: {error_msg}"
                )

        except Exception as e:
            logging.error(
                f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫–∞–ª—å–ø–∏–Ω–≥ —Å–∏–≥–Ω–∞–ª–∞ {signal.symbol}: {e}"
            )

    async def place_scalping_order(self, signal, position_size, leverage):
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å–∫–∞–ª—å–ø–∏–Ω–≥ –æ—Ä–¥–µ—Ä–∞"""
        try:
            order = await self.exchange.place_order(
                symbol=signal.symbol,
                side=signal.action.lower(),
                amount=position_size,
                price=None,  # Market order –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                stop_loss=signal.stop_loss,
                take_profit=signal.take_profit,
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–µ—á–µ –≤ –æ—Ä–¥–µ—Ä
            if order and not order.get("error"):
                order["leverage"] = leverage
                order["scalping_mode"] = True

            return order

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å–∫–∞–ª—å–ø–∏–Ω–≥ –æ—Ä–¥–µ—Ä–∞: {e}")
            return {"error": str(e)}

    async def auto_close_scalping_position(self, symbol: str, max_duration: int):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–∫–∞–ª—å–ø–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            await asyncio.sleep(max_duration)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –ø–æ–∑–∏—Ü–∏—è
            if (
                hasattr(self.exchange, "demo_positions")
                and symbol in self.exchange.demo_positions
            ):
                logging.info(
                    f"‚è∞ –ê–í–¢–û–ó–ê–ö–†–´–¢–ò–ï —Å–∫–∞–ª—å–ø–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–∏ {symbol} (–º–∞–∫—Å. –≤—Ä–µ–º—è: {max_duration//60} –º–∏–Ω)"
                )

                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                result = await self.exchange.close_demo_position(symbol)

                if result and not result.get("error"):
                    pnl = result.get("pnl", 0)
                    logging.info(
                        f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {symbol} –∑–∞–∫—Ä—ã—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. P&L: ${pnl:.2f}"
                    )

                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
                    if self.telegram_bot:
                        await self.send_position_closed_notification(
                            symbol, pnl, "–ê–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏"
                        )

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {e}")

    async def send_scalping_notification(self, signal):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∫–∞–ª—å–ø–∏–Ω–≥ —Å–∏–≥–Ω–∞–ª–µ"""
        try:
            if not self.telegram_bot:
                return

            emoji = "üü¢" if signal.action == "BUY" else "üî¥"
            leverage = getattr(self.config, "LEVERAGE", 1)

            message = f"{emoji} <b>‚ö° –°–ö–ê–õ–¨–ü–ò–ù–ì –°–ò–ì–ù–ê–õ</b>\n\n"
            message += f"<b>–°–∏–º–≤–æ–ª:</b> {signal.symbol}\n"
            message += f"<b>–î–µ–π—Å—Ç–≤–∏–µ:</b> {signal.action}\n"
            message += f"<b>–¶–µ–Ω–∞:</b> ${signal.price:.4f}\n"
            message += f"<b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {signal.confidence:.1%}\n"
            message += f"<b>–ü–ª–µ—á–æ:</b> {leverage}x\n"

            if signal.stop_loss:
                message += f"<b>Stop Loss:</b> ${signal.stop_loss:.4f}\n"
            if signal.take_profit:
                message += f"<b>Take Profit:</b> ${signal.take_profit:.4f}\n"
            if signal.risk_reward:
                message += f"<b>Risk/Reward:</b> 1:{signal.risk_reward:.2f}\n"

            message += f"\n<b>‚ö° –°–∫–∞–ª—å–ø–∏–Ω–≥ —Ä–µ–∂–∏–º</b>\n"
            message += f"<i>–í—Ä–µ–º—è: {signal.timestamp.strftime('%H:%M:%S')}</i>"

            await self.telegram_bot.bot.send_message(
                chat_id=self.config.TELEGRAM_CHAT_ID, text=message, parse_mode="HTML"
            )

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫–∞–ª—å–ø–∏–Ω–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    async def send_position_closed_notification(
        self, symbol: str, pnl: float, reason: str
    ):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            if not self.telegram_bot:
                return

            emoji = "‚úÖ" if pnl >= 0 else "‚ùå"

            message = f"{emoji} <b>–ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞</b>\n\n"
            message += f"<b>–°–∏–º–≤–æ–ª:</b> {symbol}\n"
            message += f"<b>P&L:</b> ${pnl:.2f}\n"
            message += f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}\n"
            message += f"<i>–í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}</i>"

            await self.telegram_bot.bot.send_message(
                chat_id=self.config.TELEGRAM_CHAT_ID, text=message, parse_mode="HTML"
            )

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫—Ä—ã—Ç–∏–∏: {e}")

    async def start_websocket_streams(self):
        """–ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            await self.exchange.start_websocket_streams(
                self.config.SYMBOLS, self.handle_websocket_data
            )
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ WebSocket –ø–æ—Ç–æ–∫–æ–≤: {e}")

    async def handle_websocket_data(self, symbol: str, data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebSocket"""
        try:
            # –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
            if data.get("ohlcv"):
                candle = data["ohlcv"]
                formatted_data = [
                    {
                        "timestamp": candle[0],
                        "symbol": symbol,
                        "timeframe": "1m",
                        "open": candle[1],
                        "high": candle[2],
                        "low": candle[3],
                        "close": candle[4],
                        "volume": candle[5],
                    }
                ]

                await self.db_manager.insert_ohlcv_batch(formatted_data)

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket –¥–∞–Ω–Ω—ã—Ö {symbol}: {e}")

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–∫–∞–ª—å–ø–∏–Ω–≥ –±–æ—Ç–∞"""
        self.running = True

        tasks = []

        # –ë–´–°–¢–†–´–ô —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        tasks.append(asyncio.create_task(self.start_data_collection()))

        # –ë–´–°–¢–†–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
        tasks.append(asyncio.create_task(self.start_signal_generation()))

        # WebSocket –ø–æ—Ç–æ–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        tasks.append(asyncio.create_task(self.start_websocket_streams()))

        # Telegram –±–æ—Ç
        if self.telegram_bot:
            tasks.append(asyncio.create_task(self.telegram_bot.start_bot()))

        logging.info("üöÄ‚ö° –°–ö–ê–õ–¨–ü–ò–ù–ì –ë–û–¢ –ó–ê–ü–£–©–ï–ù –ò –ì–û–¢–û–í –ö –¢–û–†–ì–û–í–õ–ï!")

        try:
            await asyncio.gather(*tasks)
        except KeyboardInterrupt:
            logging.info("‚õî –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        except Exception as e:
            logging.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            await self.shutdown()

    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∫–∞–ª—å–ø–∏–Ω–≥ –±–æ—Ç–∞"""
        logging.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∫–∞–ª—å–ø–∏–Ω–≥ –±–æ—Ç–∞...")
        self.running = False

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        if hasattr(self.exchange, "demo_positions"):
            for symbol in list(self.exchange.demo_positions.keys()):
                try:
                    await self.exchange.close_demo_position(symbol)
                    logging.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {symbol} –∑–∞–∫—Ä—ã—Ç–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏")
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {e}")

        if self.exchange:
            self.exchange.close()

        if self.telegram_bot:
            await self.telegram_bot.stop_bot()

        logging.info("‚úÖ –°–∫–∞–ª—å–ø–∏–Ω–≥ –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
    logging.info("‚õî –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
    sys.exit(0)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Å–∫–∞–ª—å–ø–∏–Ω–≥ –±–æ—Ç–∞
    bot = HighFrequencyTradingBot()

    try:
        await bot.initialize()
        await bot.run()
    except Exception as e:
        logging.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        return 1

    return 0


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
