import asyncio
from email.message import Message
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta
import pandas as pd


class TelegramBot:
    def __init__(self, config, db_manager, strategy, exchange):
        self.config = config
        self.db = db_manager
        self.strategy = strategy
        self.exchange = exchange
        self.bot = Bot(token=config.TELEGRAM_TOKEN)
        self.dp = Dispatcher()
        self.setup_handlers()

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""

        @self.dp.message(Command("start"))
        async def start_command(message: types.Message):
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
                    [InlineKeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
                    [
                        InlineKeyboardButton(
                            text="üìà –ü–æ–∑–∏—Ü–∏–∏", callback_data="positions"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"
                        )
                    ],
                    [InlineKeyboardButton(text="üîÑ –°—Ç–∞—Ç—É—Å", callback_data="status")],
                ]
            )

            await message.answer(
                "ü§ñ <b>–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç '–°—Ç—Ä–∞—Ç–µ–≥–∏—è S'</b>\n\n"
                f"–†–µ–∂–∏–º: <code>{self.config.TRADING_MODE}</code>\n"
                f"–°–∏–º–≤–æ–ª—ã: <code>{', '.join(self.config.SYMBOLS)}</code>\n"
                f"–¢–∞–π–º—Ñ—Ä–µ–π–º: <code>{self.config.TIMEFRAME}</code>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode="HTML",
                reply_markup=keyboard,
            )

        @self.dp.callback_query(lambda c: c.data == "stats")
        async def stats_callback(callback: types.CallbackQuery):
            await self.send_statistics(callback.message)
            await callback.answer()

        @self.dp.callback_query(lambda c: c.data == "balance")
        async def balance_callback(callback: types.CallbackQuery):
            await self.send_balance_info(callback.message)
            await callback.answer()

        @self.dp.callback_query(lambda c: c.data == "positions")
        async def positions_callback(callback: types.CallbackQuery):
            await self.send_positions_info(callback.message)
            await callback.answer()

        @self.dp.callback_query(lambda c: c.data == "settings")
        async def settings_callback(callback: types.CallbackQuery):
            await self.send_settings_info(callback.message)
            await callback.answer()

        @self.dp.callback_query(lambda c: c.data == "status")
        async def status_callback(callback: types.CallbackQuery):
            await self.send_status_info(callback.message)
            await callback.answer()

        @self.dp.message(Command("stats"))
        async def stats_command(message: types.Message):
            await self.send_statistics(message)

        @self.dp.message(Command("balance"))
        async def balance_command(message: types.Message):
            await self.send_balance_info(message)

        @self.dp.message(Command("positions"))
        async def positions_command(message: types.Message):
            await self.send_positions_info(message)

        @self.dp.message(Command("stop"))
        async def stop_command(message: types.Message):
            await message.answer("‚õî –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞

        @self.dp.message(Command("myid"))
        async def get_my_chat_id_handler(message: types.Message) -> None:
            """
            –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /myid. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ chat_id.
            """
            if message.chat:
                await message.answer(f"–í–∞—à Chat ID: `{message.chat.id}`")
            else:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à Chat ID.")

    async def send_statistics(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            stats = await self.db.get_strategy_performance(
                mode=self.config.TRADING_MODE, days=7
            )

            signals_stats = stats.get("signals", {})
            trades_stats = stats.get("trades", {})

            text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π</b>\n\n"
            text += f"<b>–°–∏–≥–Ω–∞–ª—ã:</b>\n"
            text += f"‚Ä¢ –í—Å–µ–≥–æ: {signals_stats.get('total_signals', 0)}\n"
            text += f"‚Ä¢ BUY: {signals_stats.get('buy_signals', 0)}\n"
            text += f"‚Ä¢ SELL: {signals_stats.get('sell_signals', 0)}\n"
            text += (
                f"‚Ä¢ –°—Ä. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {float(signals_stats.get('avg_confidence', 0)):.2%}\n\n"
            )

            text += f"<b>–°–¥–µ–ª–∫–∏:</b>\n"
            text += f"‚Ä¢ –í—Å–µ–≥–æ: {trades_stats.get('total_trades', 0)}\n"
            text += f"‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {trades_stats.get('winning_trades', 0)}\n"
            text += f"‚Ä¢ –£–±—ã—Ç–æ—á–Ω—ã—Ö: {trades_stats.get('losing_trades', 0)}\n"
            text += f"‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: {float(trades_stats.get('win_rate', 0)):.2%}\n"
            text += f"‚Ä¢ –û–±—â–∏–π P&L: ${trades_stats.get('total_pnl', 0):.2f}\n"
            text += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: ${trades_stats.get('avg_win', 0):.2f}\n"
            text += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫: ${trades_stats.get('avg_loss', 0):.2f}\n"

            if trades_stats.get("profit_factor"):
                text += f"‚Ä¢ Profit Factor: {trades_stats.get('profit_factor', 0):.2f}\n"

            await message.answer(text, parse_mode="HTML")

        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    async def send_balance_info(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ"""
        try:
            if self.exchange.is_connected:
                account_info = await self.exchange.get_account_info()
                balance = account_info.get("balance", {})

                text = f"üí∞ <b>–ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞</b>\n\n"
                text += f"USDT: {balance.get('USDT', {}).get('free', 0):.2f}\n"
                text += f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {balance.get('USDT', {}).get('used', 0):.2f}\n"
                text += (
                    f"–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {balance.get('USDT', {}).get('total', 0):.2f}\n\n"
                )

                active_positions = account_info.get("active_positions", [])
                if active_positions:
                    text += f"<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:</b>\n"
                    for pos in active_positions:
                        text += (
                            f"‚Ä¢ {pos['symbol']}: {pos['side']} {pos['contracts']:.4f}\n"
                        )
                else:
                    text += "–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç"

            else:
                text = "‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ"

            await message.answer(text, parse_mode="HTML")

        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")

    async def send_positions_info(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏—è—Ö"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –∏–∑ –ë–î
            async with self.db.db_path as db:
                async with db.execute(
                    """
					SELECT symbol, side, amount, entry_price, pnl, created_at
					FROM trades 
					WHERE status = 'open' AND mode = ?
					ORDER BY created_at DESC
				""",
                    (self.config.TRADING_MODE,),
                ) as cursor:
                    trades = await cursor.fetchall()

            if trades:
                text = f"üìà <b>–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏</b>\n\n"
                for trade in trades:
                    symbol, side, amount, entry_price, pnl, created_at = trade
                    text += f"<b>{symbol}</b>\n"
                    text += f"‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {side}\n"
                    text += f"‚Ä¢ –†–∞–∑–º–µ—Ä: {amount:.6f}\n"
                    text += f"‚Ä¢ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${entry_price:.4f}\n"
                    text += f"‚Ä¢ P&L: ${pnl:.2f}\n"
                    text += f"‚Ä¢ –í—Ä–µ–º—è: {created_at}\n\n"
            else:
                text = "–û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç"

            await message.answer(text, parse_mode="HTML")

        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")

    async def send_settings_info(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        text = f"‚öôÔ∏è <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        text += f"<b>–û—Å–Ω–æ–≤–Ω—ã–µ:</b>\n"
        text += f"‚Ä¢ –†–µ–∂–∏–º: {self.config.TRADING_MODE}\n"
        text += f"‚Ä¢ –°–∏–º–≤–æ–ª—ã: {', '.join(self.config.SYMBOLS)}\n"
        text += f"‚Ä¢ –¢–∞–π–º—Ñ—Ä–µ–π–º: {self.config.TIMEFRAME}\n\n"

        text += f"<b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è:</b>\n"
        text += f"‚Ä¢ EMA –±—ã—Å—Ç—Ä–∞—è: {self.config.EMA_FAST}\n"
        text += f"‚Ä¢ EMA –º–µ–¥–ª–µ–Ω–Ω–∞—è: {self.config.EMA_SLOW}\n"
        text += f"‚Ä¢ RSI –ø–µ—Ä–∏–æ–¥: {self.config.RSI_PERIOD_LONG}\n"
        text += f"‚Ä¢ –ú–∏–Ω. ADX: {self.config.MIN_ADX}\n\n"

        text += f"<b>–†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç:</b>\n"
        text += f"‚Ä¢ –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: {self.config.RISK_PER_TRADE:.1%}\n"
        text += f"‚Ä¢ ATR —Å—Ç–æ–ø: {self.config.ATR_STOP_MULTIPLIER}x\n"
        text += f"‚Ä¢ ATR —Ü–µ–ª—å: {self.config.ATR_TARGET_MULTIPLIER}x\n"
        text += f"‚Ä¢ –ú–∞–∫—Å. –ø–æ–∑–∏—Ü–∏–π: {self.config.MAX_POSITIONS}\n"

        await message.answer(text, parse_mode="HTML")

    async def send_status_info(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        text = f"üîÑ <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
        text += (
            f"‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit: {'‚úÖ' if self.exchange.is_connected else '‚ùå'}\n"
        )
        text += f"‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ‚úÖ\n"
        text += f"‚Ä¢ –†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏: {self.config.TRADING_MODE}\n"
        text += f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"

        await message.answer(text, parse_mode="HTML")

    async def send_signal_notification(self, signal):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ—Ä–≥–æ–≤–æ–º —Å–∏–≥–Ω–∞–ª–µ"""
        try:
            emoji = (
                "üü¢"
                if signal.action == "BUY"
                else "üî¥" if signal.action == "SELL" else "‚ö™"
            )

            text = f"{emoji} <b>–¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª</b>\n\n"
            text += f"<b>–°–∏–º–≤–æ–ª:</b> {signal.symbol}\n"
            text += f"<b>–î–µ–π—Å—Ç–≤–∏–µ:</b> {signal.action}\n"
            text += f"<b>–¶–µ–Ω–∞:</b> ${signal.price:.4f}\n"
            text += f"<b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {signal.confidence:.1%}\n"

            if signal.stop_loss:
                text += f"<b>Stop Loss:</b> ${signal.stop_loss:.4f}\n"
            if signal.take_profit:
                text += f"<b>Take Profit:</b> ${signal.take_profit:.4f}\n"
            if signal.risk_reward:
                text += f"<b>Risk/Reward:</b> 1:{signal.risk_reward:.2f}\n"

            text += f"\n<b>–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:</b>\n"
            text += f"‚Ä¢ RSI: {signal.indicators.get('rsi_14', 0):.1f}\n"
            text += f"‚Ä¢ ADX: {signal.indicators.get('adx', 0):.1f}\n"
            text += f"‚Ä¢ –û–±—ä–µ–º: {signal.indicators.get('volume_ratio', 0):.2f}x\n"

            text += f"\n<i>–í—Ä–µ–º—è: {signal.timestamp.strftime('%H:%M:%S')}</i>"

            await self.bot.send_message(
                chat_id=self.config.TELEGRAM_CHAT_ID, text=text, parse_mode="HTML"
            )

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {e}")

    async def start_bot(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
        try:
            await self.dp.start_polling(self.bot)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞: {e}")

    async def stop_bot(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞"""
        await self.bot.session.close()
